@page "/entidad"
@page "/entidad/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager navegacion;
@inject IJSRuntime JSRuntime

<h2 class="mt-3">@titulo</h2>

@if (!errorBD)
{
    <div class="mt-4">
        <label class="form-label fw-bold">Tipo de Propiedad</label>
        <InputSelect class="form-select" @bind-Value="entidad.IdTipoPropiedad">
            @foreach (var tipo in tipos)
            {
                <option value="@tipo.Id">@tipo.Descripcion</option>
            }
        </InputSelect>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Titulo</label>
        <InputText class="form-control" @bind-Value="entidad.Titulo"></InputText>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Descripcion</label>
        <InputText class="form-control" @bind-Value="entidad.Descripcion"></InputText>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Habitaciones</label>
        <InputNumber class="form-control" @bind-Value="entidad.CantidadHabitaciones"></InputNumber>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Metros Cuadrados</label>
        <InputNumber class="form-control" @bind-Value="entidad.M2"></InputNumber>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Precio</label>
        <InputNumber class="form-control" @bind-Value="entidad.Precio"></InputNumber>
    </div>

    <div class="mt-4">
        <label class="form-label fw-bold">Fecha de Alta</label>
        <InputDate class="form-control" @bind-Value="entidad.FechaAlta" readonly disabled></InputDate>
    </div>

    <div class="d-flex align-items-center justify-content-end mt-3">
        <a class="btn btn-warning" href="entidades">Volver</a>

        <button class="btn btn-primary ms-2" type="submit" @onclick="Submit">
            @btnTexto
        </button>
    </div>
}
else
{
    <div class="alert alert-danger fw-bold my-4" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <a class="btn btn-warning" href="entidades">Volver</a>
    </div>
}


@code {
    [Parameter]
    public int id { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    [SupplyParameterFromForm]
    private Propiedad entidad { get; set; } = new Propiedad();
    List<TipoPropiedad> tipos = new List<TipoPropiedad>();

    bool errorBD = false;

    protected override async Task OnInitializedAsync()
    {
        if (id != 0)
        {
            titulo = "Editar";
            btnTexto = "Actualizar";
            try
            {
                entidad = await PropiedadApiClient.GetAsync(id);
                tipos = (List<TipoPropiedad>)await TipoPropiedadApiClient.GetAllAsync();
            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
        else
        {
            titulo = "Nuevo";
            btnTexto = "Guardar";
            try
            {
                tipos = (List<TipoPropiedad>)await TipoPropiedadApiClient.GetAllAsync();
            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
    }

    private async void Submit()
    {
        if (this.Validar() == "")
        {
            if (id != 0)
            {
                var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas modificar?");
                if (confirm)
                {
                    await PropiedadApiClient.UpdateAsync(entidad);
                    navegacion.NavigateTo("/entidades");
                }
            }
            else
            {
                var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas agregar?");
                if (confirm)
                {
                    entidad.FechaAlta = DateTime.Now;
                    await PropiedadApiClient.AddAsync(entidad);
                    navegacion.NavigateTo("/entidades");
                }
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", this.Validar());
        }
    }

    private string Validar()
    {
        if (entidad.Titulo.Length > 50)
        {
            return "El titulo debe tener menos de 50 caracteres.";
        }
        if (entidad.CantidadHabitaciones < 0 || entidad.CantidadHabitaciones > 10)
        {
            return "La cantidad de habitaciones debe estar entre 0 y 10";
        }
        if (entidad.Descripcion == string.Empty)
        {
            return "La descripcion no puede estar vacia.";
        }
        return "";
    }
}