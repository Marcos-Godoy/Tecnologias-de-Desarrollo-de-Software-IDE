@page "/producto"
@page "/producto/{idProducto:int}"
@rendermode InteractiveServer

@inject NavigationManager navegacion;
@inject IJSRuntime JSRuntime

<h2 class="mt-3">@titulo</h2>

@if (!errorBD)
{
        <EditForm Model="producto" OnValidSubmit="Submit" FormName="formulario">

            <div class="mt-4">
                <label class="form-label fw-bold">Codigo</label>
            <InputText class="form-control" @bind-Value="producto.Codigo"></InputText>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Descripcion</label>
                <InputText class="form-control" @bind-Value="producto.Descripcion"></InputText>
            </div>

            <div class="mt-4">
                <label class="form-label fw-bold">Precio</label>
                <InputNumber class="form-control" @bind-Value="producto.Precio"></InputNumber>
            </div>

            <div class="d-flex align-items-center justify-content-end mt-3">
                <a class="btn btn-warning" href="productos">Volver</a>

                <button class="btn btn-primary ms-2" type="submit">
                    @btnTexto
                </button>
            </div>

        </EditForm>
}
else
{
    <div class="alert alert-danger fw-bold my-4" role="alert">
        Error al conectarse a la base de datos!
    </div>
    <div class="d-flex justify-content-end">
        <a class="btn btn-warning" href="productos">Volver</a>
    </div>
}


@code {
    [Parameter]
    public int idProducto { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    [SupplyParameterFromForm]
    private Producto producto { get; set; } = new Producto();
    //Producto producto = new Producto();

    bool errorBD = false;

    protected override async Task OnInitializedAsync()
    {
        if (idProducto != 0)
        {
            titulo = "Editar Producto";
            btnTexto = "Actualizar";
            try
            {
                producto = await ProductoApiClient.GetAsync(idProducto);
            }
            catch (Exception)
            {
                errorBD = true;
            }
        }
        else
        {
            titulo = "Nuevo Producto";
            btnTexto = "Guardar";
        }
    }

    private async void Submit()
    {
        if (this.Validar() == "")
        {
            if (idProducto != 0)
            {
                var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas modificar?");
                if (confirm)
                {
                    await ProductoApiClient.UpdateAsync(producto);
                    navegacion.NavigateTo("/productos");
                }
            }
            else
            {
                var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"¿Estás seguro de que deseas agregar?");
                if (confirm)
                {
                    await ProductoApiClient.AddAsync(producto);
                    navegacion.NavigateTo("/productos");
                }
            }
        } else {
            await JSRuntime.InvokeVoidAsync("alert", this.Validar());
        }
    }

    private string Validar()
    {
        string mensaje = string.Empty;
        if (producto.Descripcion.Length > 50)
        {
            Console.WriteLine("La descripcion debe tener menos de 50 caracteres.");
            mensaje = "La descripcion debe tener menos de 50 caracteres.";
            return mensaje;
        }
        if (producto.Precio < 0)
        {
            mensaje = "El precio no puede ser negativo.";
            Console.WriteLine(mensaje);
            return mensaje;
        }
        string codigo = producto.Codigo;
        if(codigo[0] != 'A' && codigo.Length != 4)
        {
            mensaje = "El codigo debe empezar con 'A' y tener una longitud de 4.";
            Console.WriteLine(mensaje);
            return mensaje;
        }else
        {
            for (int i = 1; i < codigo.Length; i++)
            {
                if (!char.IsDigit(codigo[i]))
                {
                    mensaje = "El codigo debe contener solo numeros despues de la 'A'.";
                    Console.WriteLine(mensaje);
                    return mensaje;
                }
            }
        }
        return mensaje;
    }
}
        